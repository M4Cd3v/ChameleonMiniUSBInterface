//apply plugin: 'com.android.application'
apply plugin: 'java'
apply plugin: 'com.android.library'

//import android.os.Environment
import java.text.DateFormat
import java.text.SimpleDateFormat
import com.maxieds.chameleonminiusb.*

def getBuildDateTimeStamp() {
    DateFormat df = new SimpleDateFormat("YYYY-MM-DD-HH:mm:ss");
    return new String("BuildTime=" + df.format(new Date()).toString());
}

android {
    defaultConfig {

        compileSdkVersion = ChameleonMiniUSBInterface.ext.libCompileSdkVersion;
        minSdkVersion 27;
        targetSdkVersion 27;
        versionCode = ChameleonMiniUSBInterface.ext.libVersionCode;
        def versionSuffixString = ChameleonMiniUSBInterface.ext.libVersionName;
        buildToolsVersion '27.1.3'

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        testBuildType "breadCo"
        // make sure the unit test suites work on the intended production runs

        publishNonDefault true
        resConfigs "en", "en_US", "en_UK", "de"
        proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

    }
    testOptions {

        unitTests {
            // By default, local unit tests throw an exception any time the code you are testing tries to access
            // Android platform APIs (unless you mock Android dependencies yourself or with a testing
            // framework like Mockito). However, you can enable the following property so that the test
            // returns either null or zero when accessing platform APIs, rather than throwing an exception.
            returnDefaultValues true
            all {
                jvmArgs '-XX:MaxPermSize=256m'
            }
        }

    }
    productFlavors {
    }
}

//sourceCompatibility = "1.7"
//targetCompatibility = "1.7"

buildTypes {

    //def extStoragePathPrefix = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS).getAbsolutePath();

    // == THE ORIGINAL END CLIENT (BREAD CO.) IMPLEMENTATION OF THIS OSS LIBRARY: ==
    // NOTE: That if the above does not immediately sound like your usage
    // of this app, it is highly recommended that you use a secondary flavor
    // of the library defined above to avoid any necessarily proprietary
    // features and restrictions working their way into more general uses
    // for this library :)
    breadCo {

        buildConfigField "String", "chameleonUIDPrefixBytes", "BC5926C8"
        buildConfigField "String", "buildTimestamp", "\"" + getBuildDateTimeStamp() + "\""
        buildConfigField "boolean", "APP_PAID_VERSION", "true"
        buildConfigField "String", "LOGGING_FILE_DIRECTORY", "BreadCompChameleonMiniOperationLogs"
        android {
            defaultConfig {
                versionName "BreadCompanyChameleonUSBSupportLibrary" + "-" + android.defaultConfig.versionSuffixString;
            }
        }
        manifestPlaceholders = [
                appIcon : "@drawable/toast_delivery_logo_usb",
                appTheme: "@style/AppThemeRed",
                appScreenOrientation: "portrait",
                installLocation: "internalOnly"
        ]
        // keep the app big-n-bloated so no ugly images, or unintended side effects, make their way into production
        minifyEnabled false
        shrinkResources false
        crunchPngs false
        debuggable false

    }

    defaultLibraryUser {

        buildConfigField "String", "chameleonUIDPrefixBytes", Utils.byteArrayToString(Utils.generateRandomBytes(numPrefixBytes))
        buildConfigField "String", "buildTimestamp", "\"" + getBuildDateTimeStamp() + "\""
        buildConfigField "boolean", "APP_PAID_VERSION", "false"
        buildConfigField "String", "LOGGING_FILE_DIRECTORY", "ChameleonMiniOperationLogs"
        android {
            defaultConfig {
                versionName "ChameleonUSBSupportLibrary" + "-" + android.defaultConfig.versionSuffixString;
            }
        }
        manifestPlaceholders = [
                appIcon : "@drawable/toast_delivery_logo_usb",
                appTheme: "@style/AppThemeRed",
                appScreenOrientation: "portrait",
                installLocation: "auto"
        ]
        // keep the app big-n-bloated so no ugly images, or unintended side effects, make their way into production
        minifyEnabled true
        shrinkResources true
        crunchPngs true
        debuggable true
    }

}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:support-annotations:24.2.0'
    implementation 'org.apache.commons:commons-lang3:3.4'
    implementation 'com.github.felHR85:UsbSerial:4.5.2'
    implementation project(':chameleonminiusb')
    breadCoCompile project(path: ':chameleonminiusb', configuration: 'breadCo')
    defaultLibraryUserCompile project(path: ':chameleonminiusb', configuration: 'defaultLibraryUser')
}

apply plugin: 'maven'

repositories {
    jcenter()
    google()
    mavenCentral()
    maven { url "https://maven.google.com" }
    maven { url "https://jitpack.io" }
}
